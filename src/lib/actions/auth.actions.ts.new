'use server';

import prisma from '@/lib/db/prisma';
import { 
  signUpSchema, 
  verifyEmailSchema, 
  requestPasswordResetSchema, 
  resetPasswordSchema 
} from '@/lib/validations/auth';
import { sendVerificationEmail } from '@/lib/email/index';
import { sendPasswordResetEmail } from '@/lib/email';
import * as bcrypt from 'bcryptjs';
import { addHours } from 'date-fns';

export async function signUp(prevState: any, formData: FormData) {
  try {
    const rawFormData = {
      email: formData.get('email') as string,
      password: formData.get('password') as string,
      confirmPassword: formData.get('confirmPassword') as string,
    };

    // Validate the form data
    const validatedFields = signUpSchema.safeParse(rawFormData);

    if (!validatedFields.success) {
      // Convert Zod validation errors to a more usable format
      const errorMap: Record<string, string[]> = {};
      
      validatedFields.error.errors.forEach((error) => {
        const field = error.path[0] as string;
        if (!errorMap[field]) {
          errorMap[field] = [];
        }
        errorMap[field].push(error.message);
      });

      return {
        errors: errorMap,
        message: 'Please correct the errors below.',
        success: false
      };
    }

    const { email, password } = validatedFields.data;

    // Check if user already exists
    const existingUser = await prisma.user.findUnique({
      where: { email },
    });

    if (existingUser) {
      return {
        message: 'A user with this email already exists.',
        success: false
      };
    }

    // Hash the password
    const hashedPassword = await bcrypt.hashSync(password, 12);
    
    // Generate verification token (6 digits)
    const verificationToken = Math.floor(100000 + Math.random() * 900000);

    // Create the user
    const user = await prisma.user.create({
      data: {
        email,
        hashed_password: hashedPassword,
        verification_token: verificationToken,
        is_verified: false,
      },
    });

    // Send verification email
    await sendVerificationEmail(email, verificationToken.toString());

    return {
      success: true,
      message: 'Verification email sent. Please check your inbox.',
      userId: user.id,
    };
  } catch (error) {
    console.error('Error in signUp:', error);
    return { 
      message: 'An error occurred during sign up. Please try again.',
      success: false
    };
  }
}

// Rest of the file remains unchanged...
